import org.junit.jupiter.api.*;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

import java.time.LocalDate;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class BibliotecaTest {
    private Biblioteca biblioteca;
    private Livro livro1;
    private Livro livro2;
    private Usuario usuario1;
    private Usuario usuario2;

    @BeforeEach
    void setUp() {
        biblioteca = new Biblioteca();

        livro1 = new Livro("123456", "Dom Casmurro", "Machado de Assis", 1899);
        livro2 = new Livro("789012", "O Corti√ßo", "Alu√≠sio Azevedo", 1890);

        usuario1 = new Usuario("U001", "Jo√£o Silva", "joao@email.com");
        usuario2 = new Usuario("U002", "Maria Santos", "maria@email.com");

        biblioteca.adicionarLivro(livro1);
        biblioteca.adicionarLivro(livro2);
        biblioteca.registrarUsuario(usuario1);
        biblioteca.registrarUsuario(usuario2);

        // TODO: Adicionar livros e usu√°rios √† biblioteca

    }

    @Test
    @DisplayName("‚úÖ Deve cadastrar livro com sucesso")
    void testCadastrarLivro() {
        // TODO: Implementar teste para cadastro de livro
        // Verificar se livro foi adicionado √† biblioteca

        Livro livro3 = new Livro("456789", "Mem√≥rias P√≥stumas", "Machado de Assis", 1881);
        biblioteca.adicionarLivro(livro3);

        List<Livro> livrosDisponiveis = biblioteca.listarLivrosDisponiveis();
        assertTrue(livrosDisponiveis.contains(livro3), "Livro deveria estar na lista de dispon√≠veis");
    }

    @Test
    @DisplayName("‚ùå Deve lan√ßar exce√ß√£o ao cadastrar livro nulo")
    void testCadastrarLivroNulo() {
        // TODO: Implementar teste para livro nulo
        // Usar assertThrows para verificar exce√ß√£o
        assertThrows(IllegalArgumentException.class, () -> biblioteca.adicionarLivro(null));
    }

    @Test
    @DisplayName("‚úÖ Deve realizar empr√©stimo com sucesso")
    void testEmprestarLivro() {
        // TODO: Implementar teste de empr√©stimo bem-sucedido
        // Verificar se livro ficou indispon√≠vel

        LocalDate data = LocalDate.now();
        boolean emprestado = biblioteca.emprestarLivro("123456", "U001", data);
        assertTrue(emprestado);
        assertFalse(livro1.isDisponivel(), "Livro deveria estar indispon√≠vel ap√≥s empr√©stimo");
    }

    @Test
    @DisplayName("‚ùå N√£o deve emprestar livro indispon√≠vel")
    void testEmprestarLivroIndisponivel() {
        // TODO: Implementar teste para livro j√° emprestado

        LocalDate data = LocalDate.now();
        boolean emprestimo1 = biblioteca.emprestarLivro("123456", "U001", data);
        assertTrue(emprestimo1, "Empr√©stimo inicial deve ser bem-sucedido");
        boolean emprestimo2 = biblioteca.emprestarLivro("123456", "U001", data);
        assertFalse(emprestimo2, "N√£o deve permitir novo empr√©stimo do mesmo livro enquanto estiver emprestado");
    }

    @ParameterizedTest
    @DisplayName("üí∞ Deve calcular multa corretamente")
    @ValueSource(ints = {0, 5, 10})
    void testCalcularMulta(int diasAtraso) {
        // TODO: Implementar teste parametrizado para c√°lculo de multa
        // Dica: usar LocalDate.now().plusDays(diasAtraso) para data de devolu√ß√£o

        LocalDate dataEmprestimo = LocalDate.now();
        LocalDate dataDevolucao = dataEmprestimo.plusDays(14 + diasAtraso);

        biblioteca.emprestarLivro("123456", "U001", dataEmprestimo);
        double multa = biblioteca.devolverLivro("123456", dataDevolucao);
        assertEquals(diasAtraso * 2.0, multa, 0.001, "Multa deve ser 2.0 por dia de atraso");
    }

    @Test
    @DisplayName("üìö Deve listar apenas livros dispon√≠veis")
    void testListarLivrosDisponiveis() {
        // TODO: Implementar teste para listagem de livros dispon√≠veis
        // Emprestar um livro e verificar se n√£o aparece na lista

        biblioteca.emprestarLivro("123456", "U001", LocalDate.now());

        List<Livro> disponiveis = biblioteca.listarLivrosDisponiveis();

        assertFalse(disponiveis.contains(livro1), "Livro emprestado n√£o deve estar dispon√≠vel");
        assertTrue(disponiveis.contains(livro2), "Livro n√£o emprestado deve estar dispon√≠vel");
    }

    @Test
    @DisplayName("‚è∞ Deve bloquear empr√©stimo para usu√°rio com multa")
    void testUsuarioComMulta() {
        // TODO: Implementar teste para usu√°rio com multa
        // Configurar usu√°rio com multa e tentar empr√©stimo

        biblioteca.emprestarLivro("123456", "U001", LocalDate.now());
        biblioteca.devolverLivro("123456", LocalDate.now().plusDays(20)); // atraso ‚Üí multa

        boolean novoEmprestimo = biblioteca.emprestarLivro("789012", "U001", LocalDate.now());
        assertFalse(novoEmprestimo, "Usu√°rio com multa n√£o deve conseguir novo empr√©stimo");
    }

    @AfterEach
    void tearDown() {
        // TODO: Limpar recursos se necess√°rio
        biblioteca = null;
        System.out.println("Teste finalizado.");
    }
}
